type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type canister_status = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt blob;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type NodeCanister = 
 service {
   add_controlling_principal: (principal) -> ();
   get_controlling_principals: () -> (vec principal);
   remove_controlling_principal: (principal) -> ();
 };
service : {
  add_node_canister: () -> (NodeCanister, nat);
  create_canister: () -> (text);
  first_avail_node_canister: () -> (opt nat);
  get_all_node_canisters: () -> (vec principal) query;
  join_canister: (principal, nat) -> ();
  node_indexes_of_caller: () -> (vec nat);
  unjoin_canister: (principal, nat) -> ();
  view_canister_statuses: () -> (vec opt canister_status);
  view_principals_and_canisters: () -> (vec record {
                                              principal;
                                              text;
                                            }) query;
}
